import matplotlib.pyplot as plt
import csv
from io import BytesIO
from datetime import datetime, timedelta
from db import add_transaction, get_summary_by_category, export_all_transactions
from config import BOT_TOKEN

from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardButton,
    InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import sqlite3

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [["üí∞ –î–æ—Ö–æ–¥", "üí∏ –†–∞—Å—Ö–æ–¥"], ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üóë –°–±—Ä–æ—Å"]]

income_categories = ["–†–∞–±–æ—Ç–∞", "–§—Ä–∏–ª–∞–Ω—Å", "–ü—Ä–µ–º–∏—è", "–î—Ä—É–≥–æ–µ"]
expense_categories = ["–ú–∞–≥–∞–∑–∏–Ω", "–ú–µ—Ç—Ä–æ", "–ö–∞—Ñ–µ", "–ö—Ä–µ–¥–∏—Ç", "–î—Ä—É–≥–æ–µ"]

user_state = {}

period_options = {
    "üìÖ –°–µ–≥–æ–¥–Ω—è": 1,
    "üóì –ù–µ–¥–µ–ª—è": 7,
    "üìÜ –ú–µ—Å—è—Ü": 30,
    "üìà 3 –º–µ—Å—è—Ü–∞": 90,
    "ü™ô 6 –º–µ—Å—è—Ü–µ–≤": 180,
    "üìÖ –ì–æ–¥": 365
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect("finance.db", check_same_thread=False)
cursor = conn.cursor()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
async def handle_all_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if user_id in user_state and "category" in user_state[user_id]:
        try:
            amount = float(text)
            t = user_state[user_id]
            add_transaction(user_id, t["type"], t["category"], amount)
            type_label = "–î–æ—Ö–æ–¥" if t["type"] == "income" else "–†–∞—Å—Ö–æ–¥"
            now = datetime.now().strftime("%d.%m.%Y %H:%M")

            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"{type_label}: {amount}‚Ç∏\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {t['category']}\n"
                f"üïí {now}",
                reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
            )
        except ValueError:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        user_state.pop(user_id, None)
        return

    if text == "üí∞ –î–æ—Ö–æ–¥":
        user_state[user_id] = {"type": "income"}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(cat, callback_data=cat)] for cat in income_categories]
            )
        )
    elif text == "üí∏ –†–∞—Å—Ö–æ–¥":
        user_state[user_id] = {"type": "expense"}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(cat, callback_data=cat)] for cat in expense_categories]
            )
        )
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        keyboard = [[InlineKeyboardButton(label, callback_data=f"period:{days}")]
                    for label, days in period_options.items()]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif text == "üóë –°–±—Ä–æ—Å":
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å", callback_data="confirm_reset")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
            ])
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
async def handle_reset_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "confirm_reset":
        cursor.execute("DELETE FROM transactions WHERE user_id = ?", (user_id,))
        conn.commit()
        await query.message.reply_text("‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))
    else:
        await query.message.reply_text("‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data
    user_id = query.from_user.id
    user_state[user_id]["category"] = category
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def handle_period_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    _, days = query.data.split(":")
    days = int(days)

    msg = await context.bot.send_message(chat_id=user_id, text="‚è≥ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã‚Ä¶")

    income_data = get_summary_by_category(user_id, days, "income")
    expense_data = get_summary_by_category(user_id, days, "expense")

    total_income = sum(income_data.values())
    total_expense = sum(expense_data.values())
    balance = total_income - total_expense

    await query.message.reply_text(
        f"üìä –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π\n"
        f"–î–æ—Ö–æ–¥: {total_income}‚Ç∏\n"
        f"–†–∞—Å—Ö–æ–¥: {total_expense}‚Ç∏\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance}‚Ç∏"
    )

    if expense_data:
        img = generate_pie_chart(expense_data, "–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        await context.bot.send_photo(chat_id=user_id, photo=img)

    if income_data:
        img = generate_pie_chart(income_data, "–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        await context.bot.send_photo(chat_id=user_id, photo=img)

    await msg.delete()

# –≠–∫—Å–ø–æ—Ä—Ç CSV
async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = export_all_transactions(user_id)

    if not data:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    buf = BytesIO()
    writer = csv.writer(buf)
    writer.writerow(["–î–∞—Ç–∞", "–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞"])
    writer.writerows(data)
    buf.seek(0)

    await update.message.reply_document(
        document=InputFile(buf, filename="finance_export.csv"),
        caption="üìÑ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
    )

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
def generate_pie_chart(data: dict, title: str) -> InputFile:
    fig, ax = plt.subplots()
    total = sum(data.values())

    labels = [f"{cat}\n{amt:.0f}‚Ç∏ ({amt / total:.1%})" for cat, amt in data.items()]
    ax.pie(data.values(), labels=labels, startangle=90)
    ax.axis("equal")
    plt.title(title)

    buf = BytesIO()
    plt.savefig(buf, format="png", bbox_inches="tight")
    buf.seek(0)
    plt.close()
    return InputFile(buf, filename="chart.png")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("export", export_csv))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_text))
app.add_handler(CallbackQueryHandler(handle_category_selection, pattern="^(?!period:|confirm_reset|cancel_reset).*"))
app.add_handler(CallbackQueryHandler(handle_period_selection, pattern="^period:"))
app.add_handler(CallbackQueryHandler(handle_reset_confirmation, pattern="^(confirm_reset|cancel_reset)$"))

if __name__ == "__main__":
    app.run_polling()
